// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculateQSeq
NumericVector calculateQSeq(double m, NumericVector deg_seq, String model);
RcppExport SEXP _multigraphr_calculateQSeq(SEXP mSEXP, SEXP deg_seqSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type deg_seq(deg_seqSEXP);
    Rcpp::traits::input_parameter< String >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateQSeq(m, deg_seq, model));
    return rcpp_result_gen;
END_RCPP
}
// getEdgeMultipSeq
DataFrame getEdgeMultipSeq(IntegerVector deg_seq);
RcppExport SEXP _multigraphr_getEdgeMultipSeq(SEXP deg_seqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type deg_seq(deg_seqSEXP);
    rcpp_result_gen = Rcpp::wrap(getEdgeMultipSeq(deg_seq));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_multigraphr_calculateQSeq", (DL_FUNC) &_multigraphr_calculateQSeq, 3},
    {"_multigraphr_getEdgeMultipSeq", (DL_FUNC) &_multigraphr_getEdgeMultipSeq, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_multigraphr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
